func main
FUNC_DEC~ID>main~

func main()
FUNC_DEC~ID>main~(~)~

puts(x)
ID>puts~(~ID>x~)~

puts((x))
ID>puts~(~(~ID>x~)~)~

puts("Hello!")
ID>puts~(~STRING>Hello!~)~

end
END~

x:int
ID>x~COLON~T_INT~

func myFunc(x:int)
FUNC_DEC~ID>myFunc~(~ID>x~COLON~T_INT~)~

func myFunc(x:int, y:int)
FUNC_DEC~ID>myFunc~(~ID>x~COLON~T_INT~,~ID>y~COLON~T_INT~)~

extern func exit(code:int)
EXTERN~FUNC_DEC~ID>exit~(~ID>code~COLON~T_INT~)~

if (x == y)
IF~(~ID>x~==~ID>y~)~

elif (x == y)
ELIF~(~ID>x~==~ID>y~)~

else
ELSE~

if (myfunc() == x)
IF~(~ID>myfunc~(~)~==~ID>x~)~

== != > < >= <=
==~!=~GREATER~LESS~GREATER_EQ~LESS_EQ~

while (x<10)
WHILE~(~ID>x~LESS~NO>10~)~

++x
D_PLUS~ID>x~

x**y
ID>x~D_MUL~ID>y~

x && y
ID>x~AND~ID>y~

x ? y
ID>x~OR~ID>y~

x ?? y
ID>x~XOR~ID>y~

loop 5
LOOP~NO>5~

loop x
LOOP~ID>x~

foreach i : numbers
FOREACH~ID>i~COLON~ID>numbers~

struct s
STRUCT~ID>s~

struct s s1
STRUCT~ID>s~ID>s1~

float80 pi = 3.14
FLOAT_80~ID>pi~ASSIGN~DEC>3.14~

int x = s.n1
T_INT~ID>x~ASSIGN~ID>s~DOT~ID>n1~

